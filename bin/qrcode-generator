#!/usr/bin/env ruby

Encoding.default_internal='utf-8'
Encoding.default_external='utf-8'

$:.unshift File.expand_path('../lib', __dir__)

require 'qrcode-generator'

require 'optparse'

ARGV << '--help' if ARGV.empty?

options = {}
OptionParser.new do |opts|
  opts.banner = %Q{
usage: qrcode-generator <command> [options]

    the commands are:
        init       \tinit workspace in current directory
        run        \tstart generator qrcodes

    the options are:
}

  options[:width] = 400
  options[:size] = 4
  options[:border] = 1
  options[:level] = :h
  options[:logo] = true
  options[:logo_denominator] = 3
  options[:tag] = nil

  opts.on("--width=400", "chnage qrcode image width") do |n|
    width = n.to_i
    options[:width] = width if width > 0
  end

  opts.on("--size=4", "change qrcode size") do |n|
    size = n.to_i
    options[:size] = size if size > 0
  end

  opts.on("--border=1", "change qrcode border width") do |n|
    border = n.to_i
    options[:border] = border if border >= 0
  end

  opts.on("--level=h", "change qrcode level, support: l,m,q,h") do |n|
    options[:level] = n.to_sym if ["l", "m", "q", "h"].include?(n)
  end

  opts.on("--logo=true", "if you don't want logo, set false") do |n|
    options[:logo] = false if n=="false"
  end

  opts.on("--logo_denominator=3", "if set 3, then the logo's width will equal to 1/3 of whole image width") do |n|
    logo_denominator = n.to_i
    options[:logo_denominator] = logo_denominator if logo_denominator > 0
  end

  opts.on("--tag=someString", "if set 'someString', will add '(someString)' to the end of filename") do |n|
    tag = n.to_s.strip
    options[:tag] = tag if !tag.empty?
  end

end.parse!

command = ARGV[0]
case command
when "init"
  QrcodeGenerator::Initer.new(Dir.pwd).init
when "run"
  QrcodeGenerator::Runner.new(Dir.pwd, options).run
else
  puts "unknown command: #{command}"
end
